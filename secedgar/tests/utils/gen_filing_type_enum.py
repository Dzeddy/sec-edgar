import csv
from datetime import datetime


def generate_signature(text, comment):
    variable_name = generate_variable_name(text)

    if "_AMEND" in variable_name:
        comment += " [AMENDMENT]"
    return f"FILING_{variable_name} = '{text}' # {comment}"


def generate_variable_name(text):
    partial_fix = text.upper().replace(" ", "").replace("-", "")
    if partial_fix[-2:] == "/A":
        partial_fix = partial_fix[:-2] + "_AMEND"
    return partial_fix.replace("/", "")


signatures = {}
with open("tabula-edgarfm-vol2-v55.csv") as f:

    csv_reader = csv.reader(f)
    current_description_i = -1
    current_type_i = -1
    for row in csv_reader:
        row = [i.replace("\n", " ") for i in row]
        score = 0
        for i, field in enumerate(row):
            if field == "Description":
                score += 1
                current_description_i = i
            elif field == "Submission Type":
                current_type_i = i
                score += 1
        assert score != 1
        if score == 2:
            continue

        descr = row[current_description_i]
        text_contents = [x.strip() for x in row[current_type_i].split(",")]
        for text in text_contents:
            text = text.replace("/ A", "/A")
            variable_name = generate_variable_name(text)
            if variable_name not in signatures:
                signatures[variable_name] = generate_signature(text, descr)
            else:
                if "Amendment [AMENDMENT]" in signatures[variable_name]:
                    print(
                        "Replacing",
                        signatures[variable_name],
                        "with",
                        generate_signature(text, descr),
                    )
                    signatures[variable_name] = generate_signature(text, descr)

    for key, val in signatures.items():
        try:
            if "Amendment [AMENDMENT]" in val:
                lookup = key.replace("_AMEND", "")
                good_description = signatures[lookup]
                signatures[key] = good_description + " [AMENDMENT]"
                print(key)
        except KeyError:
            signatures[key] = signatures[key].replace(
                "Amendment [AMENDMENT]", "(Could not find original type) [AMENDMENT]"
            )
with open("out.py", "w") as fi:
    date = datetime.today().strftime("%Y-%m-%d %H:%M:%S")
    fi.write(f"# Generated by gen_filing_type_enum.py as of {date}\n")
    for row in signatures.values():
        fi.write(row + "\n")